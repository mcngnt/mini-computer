
/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:



    Mux16(a=rA, b=inM, sel=instruction[12], out=yValue);

    ALU(zx=instruction[11], nx = instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6],x=rD, y=yValue, zr=zrAlu, ng=ngAlu, out=outAlu );

    Not(in=ngAlu, out=notNgAlu);
    Not(in=zrAlu, out=notZrAlu);
    And(a=notZrAlu, b=notNgAlu, out=pgAlu);


    And(a=instruction[15], b=instruction[5], out=d1C);
    And(a=instruction[15], b=instruction[4], out=d2C);
    And(a=instruction[15], b=instruction[3], out=d3C, out=writeM);

    Not(in=instruction[15], out=cInstru);
    Or(a=d1C, b=cInstru, out=loadA);

    Mux16(a=instruction, b=outAlu, sel=instruction[15], out=inA);

    ARegister(in=inA, load=loadA, out=rA, out[0..14]=addressM);
    DRegister(in=outAlu, load=d2C, out=rD);

    Mux16(a=inM, b=outAlu, sel=d3C, out=outM);

    And(a=instruction[2], b=ngAlu, out=j1Cond);
    And(a=instruction[1], b=zrAlu, out=j2Cond);
    And(a=instruction[0], b=pgAlu, out=j3Cond);

    Or(a=j1Cond, b=j2Cond, out=tempJCond);
    Or(a=tempJCond, b=j3Cond, out=jCond);
    And(a=instruction[15], b=jCond, out=trueJCond);
    Not(in=trueJCond, out=notTrueJCond);


    Not(in=trueJCond, out=incrCond);

    PC(in=rA, load=trueJCond, inc=incrCond, reset=reset, out[0..14]=pc);


    

}